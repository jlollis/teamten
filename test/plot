#!/usr/bin/env java_launcher
# vim:ft=java:nospell
# lib:/home/lk/kiln/teamten/java/dist/teamten.jar

// Copyright 2011 Lawrence Kesteloot

import com.teamten.image.ImageUtils;
import com.teamten.math.Complex;
import com.teamten.math.Matrix;
import com.teamten.math.Vector;
import com.teamten.render.AmbientOcclusionMaterial;
import com.teamten.render.Color;
import com.teamten.render.Material;
import com.teamten.render.Renderer;
import com.teamten.render.Triangle;

import java.awt.image.BufferedImage;

import java.io.IOException;

/**
 * Plots a 2D function in 3D.
 */
public class plot {
    private static final int SUPERSAMPLE = 1;
    private static final int AMBIENT_GRID = 4;
    private static final int SIZE = 120;
    private static final int STEP = 5;
    private static final double HEIGHT = 60;

    public static void main(String[] args) throws IOException {
        Renderer renderer = new Renderer(SUPERSAMPLE);
        renderer.setCullBackfacingTriangles(false);

        if (AMBIENT_GRID > 0) {
            Material material = new AmbientOcclusionMaterial(Color.WHITE,
                    AMBIENT_GRID, AMBIENT_GRID);
            renderer.setMaterial(material);
        }

        renderer.lookAt(Vector.make(190, 200, 200), Vector.make(0, 0, 0));

        for (int x = -SIZE; x <= SIZE - STEP; x += STEP) {
            for (int y = -SIZE; y <= SIZE - STEP; y += STEP) {
                Vector v00 = makeVertex(x,        y);
                Vector v10 = makeVertex(x + STEP, y);
                Vector v01 = makeVertex(x,        y + STEP);
                Vector v11 = makeVertex(x + STEP, y + STEP);

                renderer.addTriangle(new Triangle(v00, v10, v01));
                renderer.addTriangle(new Triangle(v01, v10, v11));
            }
        }

        BufferedImage image = renderer.render(400, 400);
        ImageUtils.save(image, "out.png");
    }

    private static Vector makeVertex(double x, double y) {
        return Vector.make(x, function(x, y), y);
    }

    private static double function(double x, double y) {
        Complex z = new Complex(x / SIZE, -y / SIZE);

        /// return z.argument() / Math.PI * HEIGHT;
        /// return z.modulus() * HEIGHT;
        return z.pow(7).argument() / Math.PI * HEIGHT;
    }
}

#!/usr/bin/env java_launcher
# vim:ft=java:nospell
# lib:../dist/teamten.jar

// Copyright 2011 Lawrence Kesteloot

import com.teamten.tictactoe.Board;
import com.teamten.tictactoe.Mark;
import com.teamten.tictactoe.ComputerPlayer;
import com.teamten.tictactoe.EvaluatedMove;

/**
 * Test driver for Tic Tac Toe package.
 */
public class tictactoe {
    public static void main(String[] args) {
        Board board = new Board();
        ComputerPlayer[] computerPlayers = new ComputerPlayer[3];

        if (false) {
            board.makeMove(0);
            board.makeMove(4);

            board.makeMove(8);
            board.makeMove(1);

            board.makeMove(7);
            board.makeMove(6);

            // board.makeMove(2);
        }

        if (false) {
            // Losing game.
            board.makeMove(4);
            board.makeMove(1);
        }

        if (false) {
            // Human starts game.
            board.makeMove(1);
        }

        if (false) {
            computerPlayers[Mark.CROSS] = new ComputerPlayer(true, 10);
            computerPlayers[Mark.NOUGHT] = new ComputerPlayer(false, 2);

            // Play game to completion.
            board.print("");

            while (board.getWinner() == Mark.EMPTY) {
                ComputerPlayer computerPlayer = computerPlayers[board.getSide()];
                EvaluatedMove evaluatedMove = computerPlayer.getMove(board);
                if (evaluatedMove.getIndex() == -1) {
                    // Tie.
                    break;
                }
                evaluatedMove.printPrincipalVariation();
                board.makeMove(evaluatedMove.getIndex());
                board.print("");
            }
        }

        if (false) {
            computerPlayers[Mark.CROSS] = new ComputerPlayer();
            computerPlayers[Mark.NOUGHT] = new ComputerPlayer();

            // Find distribution of first moves.
            int[] count = new int[Board.NUM_SQUARES];

            for (int i = 0; i < 100; i++) {
                board = new Board();
                ComputerPlayer computerPlayer = computerPlayers[board.getSide()];
                EvaluatedMove evaluatedMove = computerPlayer.getMove(board);
                count[evaluatedMove.getIndex()] += 1;
            }

            for (int i = 0; i < Board.NUM_SQUARES; i++) {
                System.out.println(i + ": " + count[i]);
            }
        }

        if (true) {
            // Play many games against itself to find who's better.

            int NUM_GAMES = 100;
            int MAX_MAX_DEPTH = 10;

            for (int smart = 0; smart <= 1; smart++) {
                System.out.println();
                System.out.println(smart == 1 ? "Smart:" : "Dumb:");
                for (int maxDepth = 1; maxDepth < MAX_MAX_DEPTH; maxDepth++) {
                    int[] numWins = new int[3];
                    for (int i = 0; i < NUM_GAMES; i++) {
                        // Clear slate.
                        board = new Board();
                        computerPlayers[Mark.CROSS] = new ComputerPlayer(smart == 1, 100);
                        computerPlayers[Mark.NOUGHT] = new ComputerPlayer(false, maxDepth);

                        while (board.getWinner() == Mark.EMPTY) {
                            ComputerPlayer computerPlayer = computerPlayers[board.getSide()];
                            EvaluatedMove evaluatedMove = computerPlayer.getMove(board);
                            if (evaluatedMove.getIndex() == -1) {
                                // Tie.
                                break;
                            }
                            /// evaluatedMove.printPrincipalVariation();
                            board.makeMove(evaluatedMove.getIndex());
                        }

                        numWins[board.getWinner()] += 1;
                    }

                    System.out.printf("Cross: %2d  Nought: %2d  Tie: %2d%n",
                            numWins[Mark.CROSS], numWins[Mark.NOUGHT], numWins[Mark.EMPTY]);
                }
            }
        }
    }
}
